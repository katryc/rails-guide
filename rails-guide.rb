#Questions

#Q:What line of code do you need to change the Rails Welcome Aboard page? In what file do we put this code?
#A: You can change the "root" of your routes to the page you would want to be your landing(home) page like this:

config/routes.rb/:
   
   root "welcome#index"


#Q: What paths are generated by the following code: resources :articles ?

#A: Resources are collections of simular objects that belong to your model; depending on what name you give your model, the name of our resources will change accordingly. You can specify the resources in the config/routes.rb file, in order to create paths to your objects. To see what paths were generated, run 'rake routes' in your terminal. You will see a that yuor "resources" will have all the standard RESTful actions generated for free by rails in the "verb" colomn". In order to use proper links, just pick the path from the "prefix" colomn" to use for your specific links and buttons. 
# in case of resources :article example, we will probably be getting the following paths:

  article
  new_article
  edit_article
  update_article
  destroy_article
  

  




#Q:  What line of code do you need to fix the following error: ActiveModel::ForbiddenAttributesError ? Which file? Why?
#A: This error is the result of violating the Strong Parameters rules. It is the rule of controlling the access to the data: security, if you will. In your Articles Controller you have private method at the very bottom where you specify the parameters that are open(permit(:args, :args)) to modification, so if you are trying to manipulate the parameters that are not included in the declaration of your private 'article_params' method, you will get a conflict in your ActiveModel.
#To fix the error, make sure to include this(put whatever argments you want to be accessable!):

app/controllers/articles_controller.rb
   
private

def article_params
    params.require(:particle).permit(:title, :text)
  
  end
  
  





#Q: Provide one example of a refactoring techinque using partials. Include the partial file name, the code inside the partial, and the code used to display that partial.
#A: Partials are partial templates. Partials are extremely useful for managing chunks of code acroos the views. You can easily move the code you want to render to any of your view controllers in chunks. Most common example is renedring the 'form_for' integration: 

app/views/articles/_form.html.erb
#NB: partials are by convention named ' _name'


<%= form_for @article do |f|%>
<%= f.collection_select :category_id, Category.all, :id, :name, { prompt: "Add a corresponding category"}%>

<h2>Title  <%= f.text_field :title%>
  <br>
<h2>Content <%= f.text_area :content%>
  <br>
  <%= f.submit%>
  <%end>
 
 
# This form containes fields for chosing the categorydispaying the :title, :content and a submit button
#  Now we don't want to get our code wet and keet inserting the same lines of code every time we want to display the same fields on our pages--that's where the partial comes handy: we can just use renderind in the view controller of our choice like this, for example:

app/views/articles/edit.html.erb

<h1>Edit this articles</h1>
<%= render 'form'%>
<%end>

# here we simply calling "render" to create a response that will be send to the browser even though we didnt write it in the edit.html.erb. That is the magic of Controller sending the response by wraping the view in layouts or possible partial views, that we take advantage of.